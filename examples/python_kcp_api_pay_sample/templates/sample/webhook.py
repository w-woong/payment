# python 샘플의 경우 flask 프레임워크로 구성되어있습니다

# ==========================================================================
#  PAGE : 공통 통보 PAGE 예시                                       
# --------------------------------------------------------------------------
#        연동시 오류가 발생하는 경우 아래의 주소로 접속하셔서 확인하시기 바랍니다.
# -------------------------------------------------------------------------- 
#    Copyright (c)  2022   NHN KCP Inc.   All Rights Reserverd.               
# ==========================================================================

from flask import Flask, request
import requests

app = Flask(__name__)

# ========================================================================== 
#  01. 공통 통보 페이지 설명(필독!!)                                        
# -------------------------------------------------------------------------- 
#        공통 통보 페이지에서는,                                                  
#       가상계좌 입금 통보 데이터를 KCP를 통해 실시간으로 통보 받을 수 있습니다. 
                                                                            
#  webhook 페이지는 이러한 통보 데이터를 받기 위한 샘플 페이지        
#       입니다. 현재의 페이지를 업체에 맞게 수정하신 후, 아래 사항을 참고하셔서  
#  KCP 관리자 페이지에 등록해 주시기 바랍니다.                              
                                                                            
#       등록 방법은 다음과 같습니다.                                             
#   - KCP 관리자페이지(admin.kcp.co.kr)에 로그인 합니다.                      
#   - [쇼핑몰 관리] -> [정보변경] -> [공통 URL 정보] -> 공통 URL 변경 후에    
#       가맹점 URL을 입력합니다.                                                
# ========================================================================== 

@app.route('/webhook')
def webhook():
    # ========================================================================== 
    # 02. 공통 통보 데이터받기 
    # --------------------------------------------------------------------------
    site_cd      = request.form['site_cd'] # 사이트 코드
    tno          = request.form['tno'] # KCP 거래번호
    order_no     = request.form['order_no'] # 주문번호
    tx_cd        = request.form['tx_cd'] # 업무처리 구분 코드
    tx_tm        = request.form['tx_tm'] # 업무처리 완료 시간
    # --------------------------------------------------------------------------
    ipgm_name    = '' # 주문자명
    remitter     = '' # 입금자명
    ipgm_mnyx    = '' # 입금 금액
    bank_code    = '' # 은행코드
    account      = '' # 가상계좌 입금계좌번호
    op_cd        = '' # 처리구분 코드
    noti_id      = '' # 통보 아이디
    cash_a_no    = '' # 현금영수증 승인번호
    cash_a_dt    = '' # 현금영수증 승인시간
    cash_no      = '' # 현금영수증 거래번호

    # --------------------------------------------------------------------------
    #  02-1. 가상계좌 입금 통보 데이터 받기
    # --------------------------------------------------------------------------
    if tx_cd == 'TX00' :
        ipgm_name = request.form['ipgm_name'] # 주문자명
        remitter  = request.form['remitter'] # 입금자명
        ipgm_mnyx = request.form['ipgm_mnyx'] # 입금 금액
        bank_code = request.form['bank_code'] # 은행코드
        account   = request.form['account'] # 가상계좌 입금계좌번호
        op_cd     = request.form['op_cd'] # 처리구분 코드
        noti_id   = request.form['noti_id'] # 통보 아이디
        cash_a_no = request.form['cash_a_no'] # 현금영수증 승인번호
        cash_a_dt = request.form['cash_a_dt'] # 현금영수증 승인시간
        cash_no   = request.form['cash_no'] # 현금영수증 거래번호

    # ==========================================================================
    #  03. 공통 통보 결과를 업체 자체적으로 DB 처리 작업하시는 부분입니다.
    # --------------------------------------------------------------------------
    #        통보 결과를 DB 작업 하는 과정에서 정상적으로 통보된 건에 대해 DB 작업에  
    #        실패하여 DB update 가 완료되지 않은 경우, 결과를 재통보 받을 수 있는     
    #        프로세스가 구성되어 있습니다.                                            
                                                                             
    # * DB update가 정상적으로 완료된 경우                                     
    #      하단의 [04. result 값 세팅 하기] 에서 result 값의 value값을 0000으로     
    #      설정해 주시기 바랍니다.                                                  
                                                                             
    # * DB update가 실패한 경우                                                
    #      하단의 [04. result 값 세팅 하기] 에서 result 값의 value값을 0000이외의   
    #       값으로 설정해 주시기 바랍니다.                                      
    # -------------------------------------------------------------------------- 
    
    # --------------------------------------------------------------------------
    #  03-1. 가상계좌 입금 통보 데이터 DB 처리 작업 부분
    # --------------------------------------------------------------------------
    if tx_cd == 'TX00' :
        print('TX00 DB 처리 업체 내용 추가')
    # --------------------------------------------------------------------------
    #  03-2. 모바일계좌이체 통보 데이터 DB 처리 작업 부분
    # --------------------------------------------------------------------------
    elif tx_cd == 'TX08' : 
        print('TX08 DB 처리 업체 내용 추가')
    # ==========================================================================
    #  04. result 값 세팅 하기
    # --------------------------------------------------------------------------
    #        정상적으로 처리된 경우 value값을 0000으로 설정하여 주시기 바랍니다.
    # ==========================================================================
    result = '0000'
    return result